import gleam/float
import gleam/int
import gleam/list
import gleam/string
import sgleam/check

pub type Status {
  Pendente
  EmAndamento
  Concluida
}

// Vamos dividir a Agenda da seguinte forma:
// Id: Será um Int, o qual não pode se repetir na lista, podemos fazer com que ele vá crescendo conforme consultas ssão criadas, ou ver se alguma consulta já possui esse id
// Nome: Será uma string, com o nome do paciente
// Descricao: Será uma string, com o motivo da consulta
// Data: String, com a data da consulta e deve ter tamanho 10 (dd/mm/aaaa)
// Status: Status, podendo ser pendente, em andamento ou concluida
pub type Agenda {
  Agenda(id: Int, nome: String, descricao: String, data: String, status: Status)
}

// Exemplos de Agenda

// Agenda(id: 123, nome: "Pedro", descricao: "Torção do tornozelo", data: "12/02/2023", status: Concluida)
// Agenda(id: 10, nome: "Carlos", descricao: "Braço fraturado", data: "22/10/2025", status: Pendente)
// Agenda(id: 345, nome: "Gabriel", descricao: "Braço trincado", data: "03/10/2025", status: EmAndamento)
// [Agenda(id: 123, nome: "Pedro", descricao: "Torção do tornozelo", data: "12/02/2023", status: Concluida),Agenda(id: 10, nome: "Carlos", descricao: "Braço fraturado", data: "22/10/2025", status: Pendente),Agenda(id: 345, nome: "Gabriel", descricao: "Braço Trincado", data: "03/10/2025", status: EmAndamento)]

// ------------------------------------------------------------------------------------------------------------------

pub fn criar_consulta(
  id: Int,
  nome: String,
  descricao: String,
  data: String,
  status: Status,
) -> Result(Agenda, String) {
  case validar_consulta(id, nome, descricao, data, status) {
    True -> Ok(Agenda(id, nome, descricao, data, status))
    False -> Error("Não foi possivel criar a consulta")
  }
}

// Exemplos de criar_consulta

pub fn criar_consulta_examples() {
  check.eq(
    criar_consulta(1, "Pedro", "Torção do tornozelo", "12/02/2023", Pendente),
    Ok(Agenda(1, "Pedro", "Torção do tornozelo", "12/02/2023", Pendente)),
  )

  check.eq(
    criar_consulta(0, "", "Consulta inválida", "12-02-2023", Pendente),
    Error("Não foi possivel criar a consulta"),
  )
}

// ------------------------------------------------------------------------------------------------------------------

fn validar_consulta(
  id: Int,
  nome: String,
  descricao: String,
  data: String,
  status: Status,
) -> Bool {
  case
    validar_id(id),
    validar_texto(nome),
    validar_texto(descricao),
    validar_data(data),
    validar_status(status)
  {
    Ok(_id), Ok(_nome), Ok(_descricao), Ok(_data), Ok(_status) -> True
    _, _, _, _, _ -> False
  }
}

// Exemplos de validar_consulta

pub fn validar_consulta_examples() {
  check.eq(
    validar_consulta(1, "Pedro", "Torção do tornozelo", "12/02/2023", Pendente),
    True,
  )

  check.eq(
    validar_consulta(0, "Pedro", "Torção do tornozelo", "12/02/2023", Pendente),
    False,
  )

  check.eq(
    validar_consulta(1, "", "Torção do tornozelo", "12/02/2023", Pendente),
    False,
  )

  check.eq(
    validar_consulta(1, "Pedro", "Torção do tornozelo", "12-02-2023", Pendente),
    False,
  )
}

// ------------------------------------------------------------------------------------------------------------------

fn validar_id(id: Int) -> Result(Int, Nil) {
  case id > 0 {
    True -> Ok(id)
    False -> Error(Nil)
  }
}

// Exemplos de validar_id

pub fn validar_id_examples() {
  check.eq(validar_id(10), Ok(10))
  check.eq(validar_id(0), Error(Nil))
  check.eq(validar_id(-5), Error(Nil))
}

// ------------------------------------------------------------------------------------------------------------------

fn validar_texto(texto: String) -> Result(String, Nil) {
  case string.length(texto) > 0 {
    True -> Ok(texto)
    False -> Error(Nil)
  }
}

// Exemplos de validar_texto

pub fn validar_texto_examples() {
  check.eq(validar_texto("Pedro"), Ok("Pedro"))
  check.eq(validar_texto(""), Error(Nil))
}

// ------------------------------------------------------------------------------------------------------------------

fn validar_data(data: String) -> Result(String, Nil) {
  case
    string.length(data) == 10
    && string.slice(data, 2, 1) == "/"
    && string.slice(data, 5, 1) == "/"
  {
    True -> Ok(data)
    False -> Error(Nil)
  }
}

// Exemplos de validar_data

pub fn validar_data_examples() {
  check.eq(validar_data("12/02/2023"), Ok("12/02/2023"))
  check.eq(validar_data("2023/02/12"), Error(Nil))
  check.eq(validar_data("12-02-2023"), Error(Nil))
  check.eq(validar_data("12/02/23"), Error(Nil))
}

// ------------------------------------------------------------------------------------------------------------------

fn validar_status(status: Status) -> Result(Status, Nil) {
  case status {
    Pendente -> Ok(Pendente)
    EmAndamento -> Ok(EmAndamento)
    Concluida -> Ok(Concluida)
  }
}

// Exemplos de validar_status

pub fn validar_status_examples() {
  check.eq(validar_status(Pendente), Ok(Pendente))
  check.eq(validar_status(EmAndamento), Ok(EmAndamento))
  check.eq(validar_status(Concluida), Ok(Concluida))
}

// ------------------------------------------------------------------------------------------------------------------

pub fn adicionar_consulta(
  consultas: List(Agenda),
  consulta: Agenda,
) -> List(Agenda) {
  case consultas {
    [] -> [consulta]
    [primeiro, ..resto] -> [primeiro, ..adicionar_consulta(resto, consulta)]
  }
}

// Exemplos de adicionar_consulta

pub fn adicionar_consulta_examples() {
  let nova = Agenda(1, "Ana", "Braço fraturado", "01/01/2023", Pendente)
  check.eq(adicionar_consulta([], nova), [nova])

  let c1 = Agenda(2, "Carlos", "Braço trincado", "02/01/2023", EmAndamento)
  check.eq(adicionar_consulta([c1], nova), [c1, nova])

  let c2 = Agenda(3, "João", "Torção no pé", "03/01/2023", Concluida)
  check.eq(adicionar_consulta([c1, c2], nova), [c1, c2, nova])
}

// ------------------------------------------------------------------------------------------------------------------

pub fn atualizar_status(
  consultas: List(Agenda),
  id: Int,
  novo_status: Status,
) -> Result(Agenda, String) {
  case busca_por_id(consultas, id) {
    Ok(consulta_procurada) ->
      Ok(Agenda(..consulta_procurada, status: novo_status))
    Error(mensagem_de_erro) -> Error(mensagem_de_erro)
  }
}

// Exemplos de atualizar_status

pub fn atualizar_status_examples() {
  let c1 = Agenda(1, "Ana", "Braço fraturado", "01/01/2023", Pendente)
  check.eq(
    atualizar_status([c1], 1, Concluida),
    Ok(Agenda(1, "Ana", "Braço fraturado", "01/01/2023", Concluida)),
  )

  check.eq(atualizar_status([c1], 99, Concluida), Error("Id não encontrado"))
}

// ------------------------------------------------------------------------------------------------------------------

pub fn busca_por_id(agenda: List(Agenda), id: Int) -> Result(Agenda, String) {
  case agenda {
    [] -> Error("Id não encontrado")
    [primeiro, ..] if primeiro.id == id -> Ok(primeiro)
    [_, ..resto] -> busca_por_id(resto, id)
  }
}

// Exemplos de busca_por_id

pub fn busca_por_id_examples() {
  let c1 = Agenda(1, "Ana", "Braço fraturado", "01/01/2023", Pendente)
  check.eq(busca_por_id([c1], 1), Ok(c1))
  check.eq(busca_por_id([c1], 2), Error("Id não encontrado"))
}

// ------------------------------------------------------------------------------------------------------------------

pub fn filtra_por_status(agenda: List(Agenda), status: Status) -> List(Agenda) {
  case agenda {
    [] -> []
    [primeira, ..resto] if primeira.status != status ->
      filtra_por_status(resto, status)
    [primeira, ..resto] -> [primeira, ..filtra_por_status(resto, status)]
  }
}

// Exemplos de filtra_por_status

pub fn filtra_por_status_examples() {
  let c1 = Agenda(1, "Ana", "Braço fraturado", "01/01/2023", Pendente)
  let c2 = Agenda(2, "Carlos", "Braço trincado", "02/01/2023", Concluida)
  let c3 = Agenda(3, "Pedro", "Torção do tornozelo", "03/01/2023", Concluida)

  check.eq(filtra_por_status([c1, c2, c3], Concluida), [c2, c3])
}

// ------------------------------------------------------------------------------------------------------------------

pub fn remove_concluidas(agenda: List(Agenda)) -> List(Agenda) {
  case agenda {
    [] -> []
    [primeira, ..resto] if primeira.status == Concluida ->
      remove_concluidas(resto)
    [primeira, ..resto] -> [primeira, ..remove_concluidas(resto)]
  }
}

// Exemplos de remove_concluidas

pub fn remove_concluidas_examples() {
  let c1 = Agenda(1, "Ana", "Braço fraturado", "01/01/2023", Pendente)
  let c2 = Agenda(2, "Carlos", "Braço trincado", "02/01/2023", Concluida)
  let c3 = Agenda(3, "Pedro", "Torção do tornozelo", "03/01/2023", Pendente)

  check.eq(remove_concluidas([c1, c2, c3]), [c1, c3])
}

// ------------------------------------------------------------------------------------------------------------------

pub fn contar_por_status(agenda: List(Agenda), status: Status) -> Int {
  list.length(filtra_por_status(agenda, status))
}

// Exemplos de contar_por_status

pub fn contar_por_status_examples() {
  let c1 = Agenda(1, "Ana", "Braço fraturado", "01/01/2023", Pendente)
  let c2 = Agenda(2, "Carlos", "Braço trincado", "02/01/2023", Concluida)
  let c3 = Agenda(3, "Pedro", "Torção do tornozelo", "03/01/2023", Concluida)

  check.eq(contar_por_status([c1, c2, c3], Concluida), 2)
}

// ------------------------------------------------------------------------------------------------------------------

pub fn percentual_concluidas(agenda: List(Agenda)) -> String {
  let quantidade_total = int.to_float(list.length(agenda))
  let quantidade_concluida =
    int.to_float(list.length(filtra_por_status(agenda, Concluida)))
  let porcentual =
    float.to_string({ quantidade_concluida /. quantidade_total } *. 100.0)
  "O porcentual de consultas concluidas é de "
  <> string.slice(porcentual, 0, 4)
  <> "%"
}

// Exemplos de percentual_concluidas

pub fn percentual_concluidas_examples() {
  let c1 = Agenda(1, "Ana", "Braço fraturado", "01/01/2023", Pendente)
  let c2 = Agenda(2, "Carlos", "Braço trincado", "02/01/2023", Concluida)
  let c3 = Agenda(3, "Pedro", "Torção do tornozelo", "03/01/2023", Concluida)

  check.eq(
    percentual_concluidas([c1, c2, c3]),
    "O porcentual de consultas concluidas é de 66.6%",
  )
}
    [] -> [consulta]
    [primeiro, ..resto] -> [consulta, primeiro, ..resto] 
  }
}
